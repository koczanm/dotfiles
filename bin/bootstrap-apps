#!/usr/bin/env bash

echo "Starting bootstrapping"

if [[ $(command -v brew) == "" ]]; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
    # Make sure the latest Homebrew is used
    brew update
    # Upgrade any already-installed formulae
    brew upgrade
fi

# Save Homebrew's install location
BREW_PREFIX="$(brew --prefix)"

# Install GNU core utilities (those that come with macOS are outdated)
# Donâ€™t forget to add `$(brew --prefix coreutils)libexec/gnubin` to `$PATH`
brew install coreutils
ln -s "${BREW_PREFIX}/bin/gsha256sum" "${BREW_PREFIX}/bin/sha256sum"

# Install some other useful utilities like `sponge`
brew install moreutils
# Install GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed
brew install findutils
# Install and overwrite other GNU utilities
brew install grep
brew install gnu-indent
brew install gnu-sed
brew install gnu-tar
brew install gnu-which

# Create a dir for local binaries and hide it
mkdir -p "${HOME}/bin"
chflags hidden "${HOME}/bin"


# Install basic tools
BASIC_PACKAGES=(
    bat
    btop
    fd
    fzf
    gmp
    jq
    lsd
    nmap
    openssh
    reattach-to-user-namespace
    rsync
    ssh-copy-id
    tealdeer
    vivid
    wget
)
echo "Installing basic packages..."
brew install "${BASIC_PACKAGES[@]}"


# Install fonts
FONT_CASKS=(
    font-fira-code-nerd-font
)
echo "Installing fonts..."
brew tap homebrew/cask-fonts
brew install --cask "${FONT_CASKS[@]}"


# Install development tools
DEV_PACKAGES=(
    automake
    gdb
    git
    ipython
    neovim
    pyenv
    pyenv-virtualenv
    starship
    tmux
    vim
    yarn
)
echo "Installing dev packages..."
brew install "${DEV_PACKAGES[@]}"
DEV_CASKS=(
    iterm2
    visual-studio-code
)
echo "Installing dev apps..."
brew install --cask "${DEV_CASKS[@]}"


# Install devops tools
DEVOPS_PACKAGES=(
    awscli
    azure-cli
    docker
    docker-compose
    hacker1024/hacker1024/coretemp
)
echo "Installing devops packages..."
brew install "${DEVOPS_PACKAGES[@]}"
DEVOPS_CASKS=(
    session-manager-plugin
    vagrant
    virtualbox
    virtualbox-extension-pack
)
echo "Installing devops apps..."
brew install --cask "${DEVOPS_CASKS[@]}"


# Install web tools
WEB_PACKAGES=(
    httpie
    node
)
echo "Installing web packages..."
brew install "${WEB_PACKAGES[@]}"
WEB_CASKS=(
    google-chrome
)
echo "Installing web apps..."
brew install --cask "${WEB_CASKS[@]}"


# Install communication tools
COMMS_CASKS=(
    slack
    zoom
)
echo "Installing communication apps..."
brew install --cask "${COMMS_CASKS[@]}"


# Install other tools
OTHER_TOOLS=(
    macchina
    spotify-tui
)
echo "Installing other packages..."
brew install "${OTHER_TOOLS[@]}"
OTHER_CASKS=(
    alfred
    amethyst
    bitwarden
    spotify
)
echo "Installing other apps..."
brew install --cask "${OTHER_CASKS[@]}"


# Configure Python
echo "Configuring Python..."
PYTHON3_LATEST_VERSION=$(pyenv install --list | grep --extended-regexp "^\s*3\.[0-9]+\.[0-9]+\s*$" | tail -1 | xargs)
PYTHON2_LATEST_VERSION=$(pyenv install --list | grep --extended-regexp "^\s*2\.[0-9]+\.[0-9]+\s*$" | tail -1 | xargs)
pyenv install --skip-existing "${PYTHON2_LATEST_VERSION}"
pyenv install --skip-existing "${PYTHON3_LATEST_VERSION}"
pyenv global "${PYTHON3_LATEST_VERSION}"

PYTHON_PACKAGES=(
    pipenv
)
echo "Installing Python packages..."
pip install "${PYTHON_PACKAGES[@]}"


# Intall VSCode extensions
VSCODE_EXTS=(
    coenraads.bracket-pair-colorizer
    dracula-theme.theme-dracula
    eamodio.gitlens
    ms-azuretools.vscode-docker
    ms-python.python
    ms-python.vscode-pylance
    redhat.vscode-yaml
    vscode-icons-team.vscode-icons
)
echo "Installing VSCode extensions..."
for EXT in "${VSCODE_EXTS[@]}"
do
    code --install-extension "${ext}"
done
mkdir -p "${HOME}/Library/Application Support/Code/User/settings.json"
cp "${HOME}/.dotfiles/.vscode/settings.json" "${HOME}/Library/Application Support/Code/User/settings.json"


# Configure neovim
NEOVIM_PYTHON_PACKAGES=(
    bandit
    black
    flake8
    pynvim
 )
echo "Installing Python2 packages for neovim..."
pyenv virtualenv --force "${PYTHON2_LATEST_VERSION}" neovim2
$(pyenv root)/versions/neovim2/bin/python -m pip install pynvim

echo "Installing Python3 packages for neovim..."
pyenv virtualenv --force "${PYTHON3_LATEST_VERSION}" neovim3
$(pyenv root)/versions/neovim3/bin/python -m pip install "${NEOVIM_PYTHON_PACKAGES[@]}"

echo "Configuring neovim..."
mkdir -p "${HOME}/.config/nvim/"
cp "${HOME}/.dotfiles/.config/nvim/init.vim" "${HOME}/.config/nvim/init.vim"
curl -fLo"${HOME}/.local/share/nvim/site/autoload/plug.vim" --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

echo "Installing neovim plugins..."
nvim --headless +PlugInstall +UpdateRemotePlugins +qall


# Install iTerm2 profile
echo "Installing iTerm2 profile..."
mkdir -p "${HOME}/Library/Application Support/iTerm2/DynamicProfiles/"
cp "${HOME}/.dotfiles/.iterm/Profiles.json" "${HOME}/Library/Application Support/iTerm2/DynamicProfiles/Profiles.json"


# Remove outdated version from the cellar
echo "Cleaning up..."
brew cleanup


echo "Bootstrapping completed"
