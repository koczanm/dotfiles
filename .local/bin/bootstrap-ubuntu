#!/usr/bin/env bash

echo "Starting bootstrapping"

if [[ $(command -v brew) == "" ]]; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
    # Make sure the latest Homebrew is used
    brew update
    # Upgrade any already-installed formulae
    brew upgrade
fi


# Install basic tools
BASIC_PACKAGES=(
    bat
    btop
    fd
    fzf
    gmp
    jq
    lsd
    nmap
    openssh
    rsync
    ssh-copy-id
    tealdeer
    vivid
    wget
)
echo "Installing basic packages..."
brew install "${BASIC_PACKAGES[@]}"


# Install fonts
FONT_CASKS=(
    font-fira-code-nerd-font
)
echo "Installing fonts..."
brew tap homebrew/cask-fonts
brew install --cask "${FONT_CASKS[@]}"


# Install development tools
DEV_PACKAGES=(
    automake
    gdb
    git
    neovim
    pyenv
    pyenv-virtualenv
    starship
    tmux
    vim
    yarn
)
brew install "${DEV_PACKAGES[@]}"


# Install devops tools
DEVOPS_PACKAGES=(
    awscli
    azure-cli
    docker
    docker-compose
    hacker1024/hacker1024/coretemp
)
echo "Installing devops packages..."
brew install "${DEVOPS_PACKAGES[@]}"
DEVOPS_CASKS=(
    session-manager-plugin
    vagrant
    virtualbox
    virtualbox-extension-pack
)
echo "Installing devops apps..."
brew install --cask "${DEVOPS_CASKS[@]}"


# Install web tools
WEB_PACKAGES=(
    httpie
    node
)
echo "Installing web packages..."
brew install "${WEB_PACKAGES[@]}"


# Install other tools
OTHER_TOOLS=(
    macchina
)
echo "Installing other packages..."
brew install "${OTHER_TOOLS[@]}"


# Install NPM packages
NPM_PACKAGES=(
    bash-language-server
    typescript-language-server
    pyright
)
echo "Installing NPM packages..."
npm install --global "${NPM_PACKAGES[@]}"


# Configure Python
echo "Configuring Python..."
PYTHON3_LATEST_VERSION=$(pyenv install --list | grep --extended-regexp "^\s*3\.[0-9]+\.[0-9]+\s*$" | tail -1 | xargs)
PYTHON2_LATEST_VERSION=$(pyenv install --list | grep --extended-regexp "^\s*2\.[0-9]+\.[0-9]+\s*$" | tail -1 | xargs)
pyenv install --skip-existing "${PYTHON2_LATEST_VERSION}"
pyenv install --skip-existing "${PYTHON3_LATEST_VERSION}"
pyenv global "${PYTHON3_LATEST_VERSION}"

PYTHON_PACKAGES=(
    pipenv
)
echo "Installing Python packages..."
pip install "${PYTHON_PACKAGES[@]}"


# Configure neovim
NEOVIM_PYTHON_PACKAGES=(
    black
    isort
    flake8
    pynvim
 )
echo "Installing Python2 packages for neovim..."
pyenv virtualenv --force "${PYTHON2_LATEST_VERSION}" neovim2
$(pyenv root)/versions/neovim2/bin/python -m pip install pynvim

echo "Installing Python3 packages for neovim..."
pyenv virtualenv --force "${PYTHON3_LATEST_VERSION}" neovim3
$(pyenv root)/versions/neovim3/bin/python -m pip install "${NEOVIM_PYTHON_PACKAGES[@]}"

echo "Configuring Nvchad..."
mkdir -p "${HOME}/.config/nvim/"
git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
nvim +'hi NormalFloat guibg=#1e222a' +PackerSync


# Remove outdated version from the cellar
echo "Cleaning up..."
brew cleanup


echo "Bootstrapping completed"

